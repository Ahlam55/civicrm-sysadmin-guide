#!/usr/bin/env php
<?php

/**
 * Cleans small errors in markdown content
 *
 * @param string $markdown
 *   dirty markdown content
 *
 * @return string
 *   cleaned up markdown content
 */
function clean_markdown($markdown) {
  // add domain name to all hyperlinks that point to the wiki
  $pattern = '@\]\((/confluence[^)]*)\)@';
  $replace = '](https://wiki.civicrm.org$1)';
  $markdown = preg_replace($pattern, $replace, $markdown);
  return $markdown;
}

/**
 * Convert an HTML file to markdown
 *
 * @param string $htmlFilePath
 *   path to HTML file
 *
 * @return string
 *   markdown content
 * @throws \Exception
 *   if any errors encountered during conversion
 */
function convert($htmlFilePath) {
  $outputArray = array();
  $status = 1;
  exec("webpage2md '$htmlFilePath'", $outputArray, $status);
  $output = implode("\n", $outputArray);
  if ($status == 1) {
    throw new Exception("ERROR CONVERTING $htmlFilePath\n" . $output);
  }
  return $output;
}

/**
 * Gets the markdown contents of a page, as a string
 *
 * @param array $page
 *
 * @return string
 */
function getMarkdown($page) {
  if ($page['action'] == 'convert') {
    echo "converting {$page['moniker']} ... ";
    $markdown = convert($page['cacheFile']);
  }
  else {
    echo "copying {$page['moniker']} ... ";
    $markdown = file_get_contents($page['cacheFile']);
  }
  return $markdown;
}

/**
 * Process a single page. Read the input file, convert, write the output file.
 *
 * @param array $page
 */
function processPage($page) {

  $inputFilePath = $page['cacheFile'];
  $outputFilePath = $page['destinationFile'];

  // Verify that input file exists. Skip if missing.
  if (!file_exists($inputFilePath)) {
    echo "WARNING: Skipping because input file does not exist:\n"
      .  "         $inputFilePath\n";
    return;
  }

  $outputFileDir = dirname($outputFilePath);
  if (!is_dir($outputFileDir)) {
    mkdir($outputFileDir, 0777, TRUE);
  }

  // Get markdown
  try {
    $markdownContent = getMarkdown($page);
  } catch (Exception $e) {
    echo $e->getMessage();
    return;
  }

  // Write
  try {
    echo "$outputFilePath\n";
    file_put_contents($outputFilePath, $markdownContent, FILE_APPEND);
  } catch (Exception $e) {
    echo "ERROR WRITING $outputFilePath" . PHP_EOL;
    echo $e->getMessage();
  }

  echo "done" . PHP_EOL;
}

/**
 * Process all pages by reading input files, converting, and writing output
 * files.
 *
 * @param array $pages
 */
function processPages($pages) {
  foreach ($pages as $page) {
    processPage($page);
  }
}

$pages = include __DIR__ . '/pages.php';

processPages($pages);

